/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package _/home/unidy/kv_etcd/src */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"
#include <stdint.h>
#include <stdbool.h>
enum kv_etcd_msg_type {KV_ETCD_MSG_PUT, KV_ETCD_MSG_DEL};
typedef void (*kv_etcd_msg_handler)(enum kv_etcd_msg_type msg, const char * key, uint32_t key_len, const void * val, uint32_t val_len);
static void _msg_hdl_wrapper(kv_etcd_msg_handler h, uint32_t msg_type, _GoString_ key, _GoString_ val) {
	h((enum kv_etcd_msg_type)msg_type, key.p, key.n, val.p, val.n);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern uint64_t kvEtcdLeaseCreate(uint32_t ttl, _Bool keepalive);
extern void kvEtcdLeaseRevoke(uint64_t leaseID);
extern void kvEtcdPut(char* key, void* val, uint32_t valLen, uint64_t* leaseID);
extern void kvEtcdDel(char* key);
extern int kvEtcdInit(char* ip, char* port, kv_etcd_msg_handler _msgHdl);
extern int kvEtcdFini();

#ifdef __cplusplus
}
#endif
